<?php
/***************************************************************************
*                                admin_backup.php
*                              -------------------
*     begin                : Thu March 24, 2005
*     copyright            : (C) 2005 Vic D'Elfant
*     email                : vic@phpbb.com
*
*     $Id: admin_backup.php 15 2006-04-17 11:16:56Z vic $
*
****************************************************************************/

/***************************************************************************
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 ***************************************************************************/

define('IN_PHPBB', true);

define('COMPRESS_NO', 0);
define('COMPRESS_ZIP', 1);
define('COMPRESS_TAR', 2);
define('COMPRESS_TGZ', 3);
define('COMPRESS_TAR_GZ', 4);
define('COMPRESS_TAR_BZ2', 5);

define('SQL_OFFSET', 800);

if( !empty($setmodules) )
{
	$module['SQL_Backup']['Backup_DB'] = basename(__FILE__);
	$module['SQL_Backup']['SQL_Download'] = basename(__FILE__) . '?mode=list';

	return;
}

//
// Load default header
//
$phpbb_root_path = './../';
require($phpbb_root_path . 'extension.inc');

$HTTP_GET_VARS = (!isset($HTTP_GET_VARS) && isset($_GET)) ? $_GET : $HTTP_GET_VARS;
$mode = ( isset($HTTP_GET_VARS['mode']) ) ? trim(stripslashes($HTTP_GET_VARS['mode'])) : '';

$no_page_header = ( isset($HTTP_GET_VARS['offset']) || $mode == 'download' ) ? true : false;
require('pagestart.' . $phpEx);

$mode = ( isset($HTTP_GET_VARS['mode']) ) ? trim(stripslashes($HTTP_GET_VARS['mode'])) : '';
$cancel = isset($HTTP_POST_VARS['cancel']);
$confirm = isset($HTTP_POST_VARS['confirm']);
$compress_method = ( ( isset($HTTP_GET_VARS['compress_method']) ) ? intval($HTTP_GET_VARS['compress_method']) : ( ( isset($HTTP_POST_VARS['compress_method']) ) ? intval($HTTP_POST_VARS['compress_method']) : 0 ) );

include($phpbb_root_path . 'includes/xml.' . $phpEx);
include($phpbb_root_path . 'includes/functions_backup.' . $phpEx);
include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);

// Are we able to write to the /cache folder?
if ( !is_writable('backups') )
{
	message_die(GENERAL_ERROR, '<br />' . $lang['SB_unwritable'] . '<br />&nbsp;');
}

// First test whether or not the current database layer is supported
$unsupported_database = true;

switch ( SQL_LAYER )
{
	case 'mysql':
	case 'mysql4':
	//case 'postgresql':
		$unsupported_database = false;
	    break;
}

if ( $unsupported_database )
{
	message_die(GENERAL_ERROR, '<br />' . $lang['SB_incompatible'] . '<br />&nbsp;');
}

// The default set phpBB tables
$phpbb_tables = array(
	CONFIRM_TABLE, AUTH_ACCESS_TABLE, BANLIST_TABLE, CATEGORIES_TABLE, CONFIG_TABLE, DISALLOW_TABLE, FORUMS_TABLE, GROUPS_TABLE,
	POSTS_TABLE, POSTS_TEXT_TABLE, PRIVMSGS_TABLE, PRIVMSGS_TEXT_TABLE, PRUNE_TABLE, RANKS_TABLE, SEARCH_TABLE, SEARCH_WORD_TABLE,
	SEARCH_MATCH_TABLE, SESSIONS_TABLE, SESSIONS_KEYS_TABLE, SMILIES_TABLE, THEMES_TABLE, THEMES_NAME_TABLE, TOPICS_TABLE, TOPICS_WATCH_TABLE,
	USER_GROUP_TABLE, USERS_TABLE, WORDS_TABLE, VOTE_DESC_TABLE, VOTE_RESULTS_TABLE, VOTE_USERS_TABLE
);

// Readme.txt content
$readme_content = "#\n";
$readme_content .= "#  phpBB Database Backup\n";
$readme_content .= "#  ********************************************************\n#\n";
$readme_content .= "#  This backup has been generated by the SQL Backup MOD, which has\n";
$readme_content .= "#  been created by Vic D'Elfant (http://www.coronis.nl)\n#\n#\n";
$readme_content .= "#  Backup date/time: " . date('r', time()) . "\n#\n#\n";
$readme_content .= "#  *** Vic D'Elfant cannot be held responsible for any problems\n";
$readme_content .= "#  directly or indirectly caused by this backup file ***\n";
$readme_content .= "#";

$template->set_filenames(array(
	'body' => 'admin/backup_body.tpl',
	'progress' => 'admin/backup_progress.tpl',
	'list' => 'admin/backup_list_body.tpl')
);

$template->assign_vars(array(
	'L_PROFILE' => $lang['Profile'],
	'L_WEBSITE' => $lang['Website'],
	'L_DB_SIZE' => $lang['Database_size'],

	'L_SB_TITLE' => $lang['SB_title'],
	'L_SB_EXPLAIN' => $lang['SB_explain'],
	'L_SB_BODY_TH' => $lang['SB_body_th'],
	'L_SB_CREATE' => $lang['SB_create'],
	'L_COMPRESSION' => $lang['SB_compression'],
	'L_NONE' => $lang['None'],

	'L_SB_SELECT_ALL' => $lang['SB_select_all'],
	'L_SB_DESELECT_ALL' => $lang['SB_deselect_all'],
	'L_SB_PROCESSING_TH' => $lang['SB_processing_th'],
	'L_SB_COMPRESSION_TH' => $lang['SB_compression_th'],
	'L_SB_PROCESSING_TITLE' => $lang['SB_processing_title'],
	'L_SB_PROCESSING_EXPLAIN' => $lang['SB_processing_explain'],
	'L_SB_ERROR_REQUEST' => $lang['SB_error_request'],
	'L_SB_ERROR_PARSE' => $lang['SB_error_parse'],

	'L_DOWNLOAD_TITLE' => $lang['SB_download_title'],
	'L_DOWNLOAD_EXPLAIN' => $lang['SB_download_explain'],
	'L_DOWNLOAD_TH_TITLE' => $lang['SB_download_th_title'],
	'L_DOWNLOAD_DATETIME' => $lang['SB_download_datetime'],
	'L_DOWNLOAD_SIZE' => $lang['SB_download_size'],
	'L_DOWNLOAD_ACTION' => $lang['SB_download_action'],

	'L_NO_BACKUPS' => $lang['SB_no_backups'],
	'L_DOWNLOAD' => $lang['Download'],
	'L_DELETE' => $lang['Delete'])
);

//
// Create 'tasks' file and start creating the backup
//
if ( isset($HTTP_POST_VARS['backup']) )
{
	$tables = array();

	// First delete up previously created files

	$dir = opendir('backups');
	while ( $file = @readdir($dir) )
	{
		if ( substr($file, 0, strlen($userdata['session_id'])) == $userdata['session_id'] )
		{
			@unlink('backups/' . $file);
		}
	}
	closedir($dir);

	$tasks_handle = fopen('backups/' . $userdata['session_id'] . '_tasks.dat', 'w+');
	if ( !$tasks_handle )
	{
		message_die(GENERAL_ERROR, 'Could not create tasks file');
	}

	fwrite($tasks_handle, "<?php\n\n\$tasks = array();\n\n");

	//
	// Add the SQL tables to the tasks file
	//
	switch ( SQL_LAYER )
	{
		case 'mysql':
		case 'mysql4':
		    $sql = 'SHOW TABLES';
		    $field = 'Tables_in_' . $dbname;
		    break;

		case 'postgresql':
		    $sql = "SELECT relname FROM pg_class WHERE relkind = 'r' AND relname NOT LIKE 'pg\_%'";
		    $field = 'relname';
		    break;
	}

	// Find out which tables will have to be added to the backup
	$result = $db->sql_query($sql);
	while ( $row = $db->sql_fetchrow($result) )
	{
		$current_table = $row[$field];
		$current_prefix = substr($current_table, 0, strlen($table_prefix));

		if ( $current_prefix == $table_prefix && intval($HTTP_POST_VARS['table__' . $current_table]) == 1 )
		{
		    $tables[] = $current_table;
		}
	}

	// ... add those tables to the tasks file
	reset($tables);
	foreach ( $tables as $table_name )
	{
		$result = $db->sql_query("SELECT COUNT(*) AS records_count FROM " . $table_name);
		$record = $db->sql_fetchrow($result);

		for ( $sql_offset = 0; $sql_offset <= $record['records_count']; $sql_offset += SQL_OFFSET )
		{
			fwrite($tasks_handle, '$tasks[] = array(\'table\' => \'' . $table_name . '\', \'offset\' => ' . $sql_offset . ');' . "\n");
		}
	}

	fwrite($tasks_handle, "\n?>");
	fclose($tasks_handle);

	$template->assign_vars(array(
		'U_SUBMIT' => append_sid('admin_backup.' . $phpEx . '?compress_method=' . $compress_method, true))
	);

	$template->pparse('progress');
}

//
// Download backup
//
elseif ( $mode == 'download' )
{
	$file_time = intval($HTTP_GET_VARS['file']);
	if ( $file_time <= 0 )
	{
		die("Invalid parameter");
	}

	$use_method = stripslashes($HTTP_GET_VARS['type']);
	$timestamp = date('j_M_Y-H_i_s', $file_time);

	// Uncompressed
	if ( $use_method == 'sql')
	{
		header('Content-Type: text/plain; name="' . $timestamp . '.sql"');
		header('Content-Disposition: attachment; filename="' . $timestamp . '.sql"');
		header('Content-Length: ' . filesize('backups/sql_' . $file_time . '.sql'));

		$handle = fopen('backups/sql_' . $file_time . '.sql', 'rb');

		while ( $buffer = fread($handle, 1024) )
		{
			echo $buffer;
		}

		fclose($handle);
	}

	// Compressed using ZIP
	elseif ( $use_method == 'zip' )
	{
		$compress = new compress_zip('r', $filename . '.' . $use_method);
		$compress->download('admin/backups/sql_' . $file_time, $timestamp);
	}

	// Compressed using TAR
	else
	{
		$compress = new compress_tar('r', $filename . '.' . $use_method);
		$compress->download('admin/backups/sql_' . $file_time, $timestamp);
	}

	exit();
}

//
// Delete a backup
//
elseif ( $mode == 'delete' && !$cancel )
{
	$file_time = intval($HTTP_GET_VARS['file']);
	$file_type = stripslashes($HTTP_GET_VARS['type']);

	if ( $file_time <= 0 )
	{
		die('Invalid parameter');
	}

	// Delete file
	if ( $confirm )
	{
		$file = 'backups/sql_' . $file_time . '.' . $file_type;

		if ( !@unlink($file) )
		{
			message_die(GENERAL_ERROR, '<br />' . sprintf($lang['SB_failed_deleting'], $file) . '<br />&nbsp;');
		}
		else
		{
			message_die(GENERAL_MESSAGE, '<br />' . sprintf($lang['SB_deleted'], '<a href="' . append_sid(basename(__FILE__) . '?mode=list') . '">', '</a>') . '<br />&nbsp;');
		}
	}

	// Admin should confirm that he wants to delete the file
	else
	{
		$template->set_filenames(array(
			'confirm' => 'admin/confirm_body.tpl')
		);

		$template->assign_vars(array(
			'MESSAGE_TITLE' => $lang['Confirm'],
			'MESSAGE_TEXT' => $lang['SB_confirm_backup_delete'],

			'L_YES' => $lang['Yes'],
			'L_NO' => $lang['No'],

			'S_CONFIRM_ACTION' => append_sid('admin_backup.' . $phpEx . '?mode=delete&file=' . $file_time . '&type=' . $file_type))
		);

		$template->pparse('confirm');
	}
}

//
// List downloads
//
elseif ( $mode == 'list' || $cancel )
{
	$no_backups_found = true;
	$dir = @opendir('backups');

	while ( ( $file = @readdir($dir) ) && $no_backups_found )
	{
		if ( preg_match("#sql_[0-9]{10}\.(tar\.gz|tar\.bz2|zip|tar|tgz|sql){1}#", $file) )
		{
			$no_backups_found = false;
		}
	}

	closedir($dir);

	if ( $no_backups_found )
	{
		$template->assign_block_vars('switch_no_backups', array());
	}
	else
	{
		$dir = @opendir('backups');
		$backups = array();

		while ( $file = @readdir($dir) )
		{
			if ( preg_match("#sql_([0-9]{10})\.(tar\.gz|tar\.bz2|zip|tar|tgz|sql){1}#", $file, $matches) )
			{
				$backups[$matches[1]] = array(
					'filename' => $file,
					'extension' => $matches[2]
				);
			}
		}

		@closedir($dir);

		// Sort the backups and print 'em
		krsort($backups);
		while ( list($backup_date, $backup_data) = each($backups) )
		{
			$template->assign_block_vars('backups', array(
				'V_DATETIME' => create_date($userdata['user_dateformat'], $backup_date, $userdata['user_timezone']),
				'V_COMPRESSION' => ( ( $backup_data['extension'] != 'sql' ) ? $backup_data['extension'] : $lang['None'] ),
				'V_SIZE' => format_filesize(@filesize('backups/' . $backup_data['filename'])),

				'U_DOWNLOAD' => append_sid('admin_backup.' . $phpEx . '?mode=download&file=' . $backup_date . '&type=' . $backup_data['extension']),
				'U_DELETE' => append_sid('admin_backup.' . $phpEx . '?mode=delete&file=' . $backup_date . '&type=' . $backup_data['extension']))
			);
		}
	}

	$template->pparse('list');
}

//
// Finish backup
//
elseif ( isset($HTTP_GET_VARS['finished']) )
{
	$backup_timestamp = time();
	$use_method = zip_compression_method($compress_method);

	// We'll just skip this bit if we don't need to compress things
	if ( $use_method != 'sql' )
	{
		// First we'll make sure that all .sql files are zipped
		$dir = opendir('backups');
		while ( $file = @readdir($dir) )
		{
			if ( substr($file, 0, strlen($userdata['session_id'])) == $userdata['session_id'] && substr($file, -4) == '.sql' )
			{
				$filename = 'backups/' . substr($file, 0, -4) . '.' . $use_method;
				if ( $use_method == 'zip' )
				{
					$table_compress = new compress_zip('w', $filename);
				}
				else
				{
					$table_compress = new compress_tar('w', $filename);
				}

				$table_compress->add_custom_file('backups/' . $file, substr($file, strlen($userdata['session_id']) + 1));
				$table_compress->close();

				unset($table_compress);
				@unlink('backups/' . $file);
			}
		}
		closedir($dir);
	}

	// Almost done... ^_^;
	$filename = 'backups/sql_' . $backup_timestamp . '.' . $use_method;

	$compress = false;

	if ( $use_method == 'sql' )
	{
		rename('backups/' . $userdata['session_id'] . '_backup.sql', $filename);
	}
	elseif ( $use_method == 'zip' )
	{
		$compress = new compress_zip('w', $filename);
		$compress->add_data($readme_content, 'readme.txt');
	}
	else
	{
		$compress = new compress_tar('w', $filename);
		$compress->add_data($readme_content, 'readme.txt');
	}

	if ( $compress !== false )
	{
		// Add files to the compressed file (if needed) and remove the temporary files from
		// the /backups file
		$dir = opendir('backups');
		while ( $file = @readdir($dir) )
		{
			if ( substr($file, 0, strlen($userdata['session_id'])) == $userdata['session_id'] )
			{
				if ( substr($file, -strlen($use_method)) == $use_method )
				{
					$compress->add_custom_file('backups/' . $file, 'tables/' . substr($file, strlen($userdata['session_id']) + 1));
				}

				@unlink('backups/' . $file);
			}
		}

		closedir($dir);

		// Close stream
		$compress->close();
	}

	message_die(GENERAL_MESSAGE, '<br />' . sprintf($lang['SB_finished_msg'], '<a href="' . append_sid('admin_backup.' . $phpEx . '?mode=download&file=' . $backup_timestamp) . '&type=' . $use_method . '">', '</a>') . '<br />&nbsp;');
}

//
// Create backup
//
elseif ( isset($HTTP_GET_VARS['offset']) )
{
	$offset = intval($HTTP_GET_VARS['offset']);

	if ( !file_exists('backups/' . $userdata['session_id'] . '_tasks.dat') )
	{
		message_die(GENERAL_ERROR, $lang['SB_tasks_file_failed']);
	}

	// Load the 'tasks' file
	include('backups/' . $userdata['session_id'] . '_tasks.dat');

	$use_method = zip_compression_method($compress_method);

	// Create new xml object
	$xml = new XML();

	// Create xml element
	$root = $xml->create_element('backup-data');
	$xml->append_child($root);

	// We don't happen to be finished yet?
	if ( !isset($tasks[$offset]) )
	{
		$ajax_table_name	= $lang['SB_creating_zipfile'];
		$ajax_progress		= 'finished';
		$ajax_next_offset	= 0;
	}

	// If not, we'll continue making the backup
	else
	{
		$task = $tasks[$offset];

		// Skip this code if we don't have to compress the backup...
		if ( $use_method != 'sql' )
		{
			$i = 1;
			$file_prefix = 'backups/' . $userdata['session_id'] . '_' . $task['table'] . '_part';

			while ( @filesize($file_prefix . $i . '.sql') > 15 * 1024 * 1024 || file_exists($file_prefix . $i . '.' . $use_method) )
			{
				if ( !file_exists($file_prefix . $i . '.' . $use_method) )
				{
					$filename = $file_prefix . $i . '.' . $use_method;
					if ( $use_method == 'zip' )
					{
						$table_compress = new compress_zip('w', $filename);
					}
					else
					{
						$table_compress = new compress_tar('w', $filename, $use_method);
					}

					$table_compress->add_custom_file($file_prefix . $i . '.sql', $task['table'] . '_part' . $i . '.sql');
					$table_compress->close();

					unset($table_compress);
					@unlink($file_prefix . $i . '.sql');
				}

				$i++;
			}

			// Create a pointer to the file we should write to
			$backup_handle = @fopen($file_prefix . $i . '.sql', 'a');
		}
		else
		{
			$backup_handle = @fopen('backups/' . $userdata['session_id'] . '_backup.sql', 'a');

			// Write the readme to the file
			if ( $backup_handle && $offset == 0 )
			{
				fwrite($backup_handle, $readme_content . "\n\n");
			}
		}

		if ( !$backup_handle )
		{
			message_die(GENERAL_ERROR, $lang['SB_sql_file_failed']);
		}

		if ( $task['offset'] == 0 )
		{
			$sql_backup .= get_table_def($task['table']) . "\n";
		}

		$sql_backup .= get_table_content($task['table'], $task['offset']);

		fwrite($backup_handle, $sql_backup);
		fclose($backup_handle);

		$ajax_table_name	= $task['table'];
		$ajax_progress		= round(100 / count($tasks) * $offset);
		$ajax_next_offset	= $offset + 1;
	}

	// Table name
	$item1 = $xml->create_element('table-name');
	$item1->append_child($xml->create_text_node($ajax_table_name));
	$root->append_child($item1);

	// Progress (pixels)
	$item2 = $xml->create_element('progress');
	$item2->append_child($xml->create_text_node($ajax_progress));
	$root->append_child($item2);

	// Next offset
	$item3 = $xml->create_element('next-offset');
	$item3->append_child($xml->create_text_node($ajax_next_offset));
	$root->append_child($item3);

	header('Content-type: text/xml');
	header('Cache-Control: no-cache');

	die($xml->to_string(1));
}

//
// Show the default page
//
else
{
	switch ( SQL_LAYER )
	{
		case 'mysql':
		case 'mysql4':
		    $sql = 'SHOW TABLES';
		    $field = 'Tables_in_' . strtolower($dbname);
		    break;
	}

	$tables = array();

	//
	// Store all table names in $tables[]
	//
	$result = $db->sql_query($sql);
	if ( !$result )
	{
		message_die(GENERAL_ERROR, 'Could not fetch table names', '', __LINE__, __FILE__, $sql);
	}

	while ( $row = $db->sql_fetchrow($result) )
	{
		$current_table = $row[$field];
		$current_prefix = substr($current_table, 0, strlen($table_prefix));

		if ( $current_prefix == $table_prefix )
		{
		    $tables[] = $current_table;
		}
	}

	$i = 0;
	reset($tables);
	foreach ( $tables as $table_name )
	{
		$field_name = $table_name;

		if ( in_array($table_name, $phpbb_tables) )
		{
			$checked = ' checked="checked"';
		}
		else
		{
			$checked = '';
			$table_name = '<b>' . $table_name . '</b>';
		}

		$template->assign_block_vars('sql_tables', array(
			'CLASS' => ( ( $i % 2 ) ? 'row2' : 'row1' ),

			'V_NAME' => $table_name,
			'V_FIELD_NAME' => $field_name,
			'V_CHECKED' => $checked)
		);

		$i++;
	}

	$db_size = get_db_size();

	$template->assign_vars(array(
		'V_DB_SIZE' => format_filesize($db_size),
		'S_SUBMIT' => append_sid('admin_backup.' . $phpEx))
	);

	$template->pparse('body');
}

if ( $mode != 'backup' )
{
	include('page_footer_admin.' . $phpEx);
}

?>

